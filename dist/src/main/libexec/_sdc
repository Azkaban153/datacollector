#!/bin/bash
#
# Copyright 2017 StreamSets Inc.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#
# resolve links - $0 may be a softlink
PRG="${0}"

while [ -h "${PRG}" ]; do
ls=`ls -ld "${PRG}"`
link=`expr "$ls" : '.*-> \(.*\)$'`
if expr "$link" : '/.*' > /dev/null; then
PRG="$link"
else
PRG=`dirname "${PRG}"`/"$link"
fi
done

BASEDIR=`dirname ${PRG}`
BASEDIR=`cd ${BASEDIR}/..;pwd`

SDC_DIST=${BASEDIR}

SDC_HOME=${SDC_HOME:=${SDC_DIST}}

PRG="${0}"
VERBOSE=0
EXEC=0
SKIP_ENV_SOURCING=0
DEPLOYMENT_INSTALL=0
DEPLOYMENT_RUN=0
while test $# -gt 0; do
  case "${1}" in
    -verbose)
      VERBOSE=1
      shift
      ;;
    -exec)
      EXEC=1
      shift
      ;;
    -skipenvsourcing)
      SKIP_ENV_SOURCING=1
      shift
      ;;
    -deploymentinstall)
      DEPLOYMENT_INSTALL=1
      shift
      ;;
    -help)
      echo ""
      echo "streamsets dc <OPTIONS>"
      echo ""
      echo "  Options:"
      echo "    -verbose          : prints out Data Collector detailed environment settings"
      echo "    -exec             : starts Data Collector JVM within the same process of the script"
      echo "    -skipenvsourcing  : skips the sourcing of the libexec/sdc-env.sh file"
      echo ""
      exit 0
      ;;
    *)
      echo ""
      echo "Invalid option(s)"
      ${PRG} -help
      exit 1
      ;;
  esac
done

if [ $SKIP_ENV_SOURCING -eq 0 ]
then
  if [ -f ${SDC_HOME}/libexec/sdc-env.sh ]
  then
    source ${SDC_HOME}/libexec/sdc-env.sh
  fi
fi

SDC_HOSTNAME=`hostname -f`
SDC_CONF=${SDC_CONF:=${SDC_HOME}/etc}
SDC_DATA=${SDC_DATA:=${SDC_HOME}/data}
SDC_LOG=${SDC_LOG:=${SDC_HOME}/log}
SDC_EXTERNAL_RESOURCES=${SDC_EXTERNAL_RESOURCES:=${SDC_HOME}/externalResources}
SDC_RESOURCES=${SDC_RESOURCES:=${SDC_EXTERNAL_RESOURCES}/resources}

############################## DEPLOYMENT INTEGRATION
try_fetch_env_for_deployment_type() {
  case $STREAMSETS_DEPLOYMENT_TYPE in
  "" | SELF)
    CSP_ENV_FILE=""
    export STREAMSETS_DEPLOYMENT_TYPE="SELF"
    ;;
  EC2)
    CSP_ENV_FILE=${SDC_HOME}/libexec/csp-envs/ec2-env.sh
    ;;
  *)
    CSP_ENV_FILE=""
    echo "Unknown STREAMSETS_DEPLOYMENT_TYPE: ${STREAMSETS_DEPLOYMENT_TYPE}"
    ;;
  esac
  if [[ ! -z ${CSP_ENV_FILE} ]]; then
    echo "Loading Deployment Bootstrap environment for ${STREAMSETS_DEPLOYMENT_TYPE}"
    if [ -f ${CSP_ENV_FILE} ]; then
      source ${CSP_ENV_FILE}
    else
      echo "Deployment environment for ${STREAMSETS_DEPLOYMENT_TYPE} not found"
    fi
  fi
}

if [[ ${DEPLOYMENT_INSTALL} -eq 0 ]]; then
  # not running within a deployment engine install run

  # defining run() and reportEvent() functions for non-deployment runs
  run() {
    $@
    RET=$?
  }
  reportEvent() {
    echo ${1} - ${4}
  }

  try_fetch_env_for_deployment_type

  # detect if the engine is configured to run as part of a deployment
  # we need the SCH URL, deployment ID, deployment token and boostrap deployment scripts to be avail
  if [[ -f ${SDC_CONF}/dpm-url.txt ]] && [[ -f ${SDC_CONF}/deployment.id ]] && [[ -f ${SDC_CONF}/deployment-token.txt ]]; then
    SCH_URL_FROM_FILE=$(cat ${SDC_CONF}/dpm-url.txt)
    ID_FROM_FILE=$(cat ${SDC_CONF}/deployment.id)
    TOKEN_FROM_FILE=$(cat ${SDC_CONF}/deployment-token.txt)
  fi

  STREAMSETS_DEPLOYMENT_SCH_URL=${STREAMSETS_DEPLOYMENT_SCH_URL:=${SCH_URL_FROM_FILE}}
  STREAMSETS_DEPLOYMENT_ID=${STREAMSETS_DEPLOYMENT_ID:=${ID_FROM_FILE}}
  STREAMSETS_DEPLOYMENT_TOKEN=${STREAMSETS_DEPLOYMENT_TOKEN:=${TOKEN_FROM_FILE}}

  if [[ -n "${STREAMSETS_DEPLOYMENT_SCH_URL}" ]] && [[ -n "${STREAMSETS_DEPLOYMENT_ID}" ]] && [[ -n "${STREAMSETS_DEPLOYMENT_TOKEN}" ]]; then
    echo "Engine running in Deployment Mode"
    DEPLOYMENT_RUN=1
  fi
else
  try_fetch_env_for_deployment_type
  if [ -z ${STREAMSETS_DEPLOYMENT_SCH_URL} ]; then
    echo "ERROR - STREAMSETS_DEPLOYMENT_SCH_URL not set"
    exit 1
  fi
  if [ -z ${STREAMSETS_DEPLOYMENT_ID} ]; then
    echo "ERROR - STREAMSETS_DEPLOYMENT_ID not set"
    exit 1
  fi
  if [ -z ${STREAMSETS_DEPLOYMENT_TOKEN} ]; then
    echo "ERROR - STREAMSETS_DEPLOYMENT_TOKEN not set"
    exit 1
  fi
  DEPLOYMENT_RUN=1
fi

if [[ ${DEPLOYMENT_RUN} -eq 1 ]]; then
    # Runs a command capturing its STDOUT, STDERR and EXIT_CODE in 3 variables: OUT, ERR, RET
  # This is a temporary version of the function, gets replaced after we source `deployment-tools.sh`
  run() {
  # parameters: command parameters....
    unset t_std t_err t_ret
    eval "$( "$@" \
      2> >(t_err=$(cat); typeset -p t_err) \
      > >(t_std=$(cat); typeset -p t_std); t_ret=$?; typeset -p t_ret )"
    OUT=$t_std
    ERR=$t_err
    RET=$t_ret

    if [[ ${RET} -ne 0 ]]; then
      echo ""
      echo "ERROR running  : $@"
      echo "      exit code: $RET"
      echo "      std error: $ERR"
      echo ""
    fi
  }

  run curl -s -S -X GET ${STREAMSETS_DEPLOYMENT_SCH_URL}/deployment-tools.sh
  if [[ ${RET} -eq 0 ]]; then
    eval "${OUT}" > /dev/null
    if [[ $? -ne 0 ]]; then
      echo "Error setting up script tools"
      exit 1
    fi
  fi
fi
##############################


# Use the percentage rate of available memory for the heap size if SDC_HEAP_SIZE_PERCENTAGE is
# specified and the calculated size is greater than 512m but limited by ulimit and cgroup. Note that
# /proc/meminfo is used to get the available memory which may not be available in some platforms.
if [[ -n "${SDC_HEAP_SIZE_PERCENTAGE}" ]] && (( SDC_HEAP_SIZE_PERCENTAGE > 0 )) && (( SDC_HEAP_SIZE_PERCENTAGE < 100 )); then
  SDC_HEAP_SIZE=`awk -v rate="$SDC_HEAP_SIZE_PERCENTAGE" '/^MemAvailable/ {printf("%.0f", $2 / 100 * rate);}' <(cat /proc/meminfo)`
  if [[ -n "${SDC_HEAP_SIZE}" ]] && (( SDC_HEAP_SIZE > 524288 )); then
    echo "INFO: Using ${SDC_HEAP_SIZE_PERCENTAGE}% of available memory for Data Collector heap size: ${SDC_HEAP_SIZE}k"
    # 50% of ulimit virtual memory in kbytes
    HALF_ULIMIT_SIZE=`awk '{printf("%.0f", $1 / 2)}' <(ulimit -v)`
    if [[ -n "${HALF_ULIMIT_SIZE}" ]] && ((HALF_ULIMIT_SIZE > 0 )) && ((HALF_ULIMIT_SIZE < SDC_HEAP_SIZE )); then
      echo "INFO: Overriding the heap size to 50% of ULIMIT virtual memory limit: ${HALF_ULIMIT_SIZE}k"
      SDC_HEAP_SIZE=${HALF_ULIMIT_SIZE}
    fi
    # 50% of cgroup memory limit in kbytes
    HALF_CGROUP_SIZE=`awk '{printf("%.0f", $1 / 2048)}' <(cat /sys/fs/cgroup/memory/memory.limit_in_bytes)`
    if [[ -n "${HALF_CGROUP_SIZE}" ]] && (( HALF_CGROUP_SIZE > 0 )) && (( HALF_CGROUP_SIZE < SDC_HEAP_SIZE )); then
      echo "INFO: Overriding the heap size to 50% of CGROUP memory limit: ${HALF_CGROUP_SIZE}k"
      SDC_HEAP_SIZE=${HALF_CGROUP_SIZE}
    fi
    SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Xmx${SDC_HEAP_SIZE}k -Xms${SDC_HEAP_SIZE}k"
  fi
fi
SDC_JAVA_OPTS=${SDC_JAVA_OPTS:="-Xmx1024m"}
SDC_MAIN_CLASS=${SDC_MAIN_CLASS:="com.streamsets.datacollector.main.DataCollectorMain"}
SDC_SECURITY_MANAGER_ENABLED=${SDC_SECURITY_MANAGER_ENABLED:="true"}
SDC_HEAPDUMP_PATH=${SDC_HEAPDUMP_PATH:=${SDC_LOG}/sdc_heapdump_`date +%s`.hprof}
SDC_JVMFATAL_PATH=${SDC_JVMFATAL_PATH:=${SDC_LOG}/hs_err_`date +%s`.log}

SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.dist.dir=${SDC_DIST}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.resources.dir=${SDC_RESOURCES}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.hostname=${SDC_HOSTNAME}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.conf.dir=${SDC_CONF}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.data.dir=${SDC_DATA}"
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.log.dir=${SDC_LOG}"

BOOTSTRAP_LIB_DIR=${BOOTSTRAP_LIB_DIR:=${SDC_DIST}/libexec/bootstrap-libs}
BOOTSTRAP_JAR_FILE_PATTERN="streamsets-datacollector-bootstrap-*.jar"

for bootstrap_jar_file in ${BOOTSTRAP_LIB_DIR}/main/*; do
  if [[ ${bootstrap_jar_file} == ${BOOTSTRAP_LIB_DIR}/main/${BOOTSTRAP_JAR_FILE_PATTERN} ]]; then
    BOOTSTRAP_JAR=${BOOTSTRAP_JAR:=${bootstrap_jar_file}}
  fi
done

SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -javaagent:${BOOTSTRAP_JAR}"

BOOTSTRAP_CLASSPATH="${BOOTSTRAP_JAR}"

if [ ! -z "${SDC_ROOT_CLASSPATH}" ]
then
  BOOTSTRAP_CLASSPATH="${BOOTSTRAP_CLASSPATH}:${SDC_ROOT_CLASSPATH}"
fi

ROOT_LIB_DIR=${ROOT_LIB_DIR:=${SDC_DIST}/root-lib}
API_LIB_DIR=${API_LIB_DIR:=${SDC_DIST}/api-lib}
API_CLASSPATH=${API_CLASSPATH:="${API_LIB_DIR}/"'*.jar'}
ASTER_CLIENT_LIB_DIR=${ASTER_CLIENT_LIB_DIR:=${SDC_DIST}/aster-client-lib}
CONTAINER_LIB_DIR=${CONTAINER_LIB_DIR:=${SDC_DIST}/container-lib}
CONTAINER_CLASSPATH=${CONTAINER_CLASSPATH:="${SDC_CONF}:${CONTAINER_LIB_DIR}/"'*.jar'}

LIBS_COMMON_LIB_DIR=${LIBS_COMMON_LIB_DIR:="${SDC_DIST}/libs-common-lib"}

STREAMSETS_LIBRARIES_DIR="${STREAMSETS_LIBRARIES_DIR:=${SDC_DIST}/streamsets-libs}"

STREAMSETS_LIBRARIES_EXTRA_DIR="${STREAMSETS_LIBRARIES_EXTRA_DIR:=${SDC_EXTERNAL_RESOURCES}/streamsets-libs-extras}"

USER_LIBRARIES_DIR="${USER_LIBRARIES_DIR:=${SDC_EXTERNAL_RESOURCES}/user-libs}"

# add system properties for configurable directories
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Dsdc.libraries.dir=${STREAMSETS_LIBRARIES_DIR} \
    -Dsdc.librariesExtras.dir=${STREAMSETS_LIBRARIES_EXTRA_DIR} \
    -Dsdc.rootLib.dir=${ROOT_LIB_DIR} \
    -Dsdc.bootstrapLib.dir=${BOOTSTRAP_LIB_DIR} \
    -Dsdc.apiLib.dir=${API_LIB_DIR} \
    -Dsdc.asterClientLib.dir=${ASTER_CLIENT_LIB_DIR} \
    -Dsdc.containerLib.dir=${CONTAINER_LIB_DIR} \
    -Dsdc.libsCommon.dir=${LIBS_COMMON_LIB_DIR} \
    -Dsdc.userLibs.dir=${USER_LIBRARIES_DIR}"

if [ -z "$JAVA_HOME" ]
then
  JAVA=`which java 2> /dev/null`
else
  JAVA="$JAVA_HOME/bin/java"
fi

if [ -z "$JAVA" ]
then
  reportEvent "ERROR" "STARTUP" "S01" "Can't find java, please set JAVA_HOME pointing to your java installation"
  exit 1
fi

# returns the JDK version.
# 8 for 1.8.0_nn, 11 for 11-ea etc, and "no_java" for undetected
jdk_version() {
  local result
  local IFS=$'\n'
  # remove \r for Cygwin
  local lines=$("$JAVA" -Xms32M -Xmx32M -version 2>&1 | tr '\r' '\n')
  for line in $lines; do
    if [[ (-z $result) && ($line = *"version \""*) ]]
    then
      local ver=$(echo $line | sed -e 's/.*version "\(.*\)"\(.*\)/\1/; 1q')
      # on macOS, sed doesn't support '?'
      if [[ $ver = "1."* ]]
      then
        result=$(echo $ver | sed -e 's/1\.\([0-9]*\)\(.*\)/\1/; 1q')
      else
        result=$(echo $ver | sed -e 's/\([0-9]*\)\(.*\)/\1/; 1q')
      fi
    fi
  done
  echo "$result"
}

JAVA_VERSION="$(jdk_version)"
if [[ "$JAVA_VERSION" = '7' ]];
then
  echo "ERROR: Detected JDK7 that is no longer supported. Please upgrade to JDK 8+."
  exit
elif [[ "$JAVA_VERSION" = '8' ]];
then
  echo "Java 1.8 detected; adding \$SDC_JAVA8_OPTS of \"${SDC_JAVA8_OPTS}\" to \$SDC_JAVA_OPTS"
  SDC_JAVA_OPTS="${SDC_JAVA_OPTS} ${SDC_JAVA8_OPTS}"

  if [ "${SDC_GC_LOGGING}" = "true" ]
  then
    SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -XX:+PrintGCDetails -XX:+PrintGCDateStamps -Xloggc:${SDC_LOG}/gc.log"
  fi
elif [[ "$JAVA_VERSION" = '11' ]];
then
  echo "Java 11 detected; adding \$SDC_JAVA11_OPTS of \"${SDC_JAVA11_OPTS}\" to \$SDC_JAVA_OPTS"
  SDC_JAVA_OPTS="${SDC_JAVA_OPTS} ${SDC_JAVA11_OPTS}"

  if [ "${SDC_GC_LOGGING}" = "true" ]
  then
    SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Xlog:gc:${SDC_LOG}/gc.log:time,uptime"
  fi
elif [[ "$JAVA_VERSION" = '14' ]];
then
  echo "Java 14 detected; adding \$SDC_JAVA14_OPTS of \"${SDC_JAVA14_OPTS}\" to \$SDC_JAVA_OPTS"
  SDC_JAVA_OPTS="${SDC_JAVA_OPTS} ${SDC_JAVA14_OPTS}"

  if [ "${SDC_GC_LOGGING}" = "true" ]
  then
    SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Xlog:gc:${SDC_LOG}/gc.log:time,uptime"
  fi
elif [[ "$JAVA_VERSION" = '15' ]];
then
  echo "Java 15 detected; adding \$SDC_JAVA15_OPTS of \"${SDC_JAVA15_OPTS}\" to \$SDC_JAVA_OPTS"
  SDC_JAVA_OPTS="${SDC_JAVA_OPTS} ${SDC_JAVA15_OPTS}"

  if [ "${SDC_GC_LOGGING}" = "true" ]
  then
    SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -Xlog:gc:${SDC_LOG}/gc.log:time,uptime"
  fi
else
  echo "WARN: could not determine Java environment version: \"${JAVA_VERSION}\" ; expected 1.8, 11 or 14, which are the supported versions" >&2
fi

# Verify correct JVM vendor
JAVA_VENDOR=`$JAVA -XshowSettings:properties -version 2>&1 | grep -e 'java.vm.name' | sed -e 's/\(.*\)= \(.*\)/\2/'`
if [[ ! "$JAVA_VENDOR" =~ "Java HotSpot(TM)" ]] && [[ ! "$JAVA_VENDOR" =~ "OpenJDK" ]]
then
  echo "WARN: Detected unsupported JDK vendor: $JAVA_VENDOR"

  # And unless unsupported JDK is explicitly enabled, die
  if [[ "${SDC_ALLOW_UNSUPPORTED_JDK}" != "true" ]]
  then
  echo ${MESSAGE}
  reportEvent "ERROR" "STARTUP" "S02" "Please install supported JDK or explicitly allow unsupported JDKs via SDC_ALLOW_UNSUPPORTED_JDK=true"
  exit 1
  fi
fi

if [ "${SDC_HEAPDUMP_ON_OOM}" = "true" ]
then
  SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -XX:+HeapDumpOnOutOfMemoryError -XX:HeapDumpPath=${SDC_HEAPDUMP_PATH}"
fi

# Adding JVM Fatal Error Log file path
SDC_JAVA_OPTS="${SDC_JAVA_OPTS} -XX:ErrorFile=${SDC_JVMFATAL_PATH}"

SDC_POLICY_FILE=""
if [ "${SDC_SECURITY_MANAGER_ENABLED}" = "true" ]
then
  SDC_POLICY_FILE=${SDC_POLICY_FILE:="file://${SDC_CONF}/sdc-security.policy"}
  if [[ "$SDC_POLICY_FILE" =~ (file:)(.*) ]]
  then
      SDC_POLICY_FILE_FOR_VALIDATION="${BASH_REMATCH[2]}"
  else
      SDC_POLICY_FILE_FOR_VALIDATION="$SDC_POLICY_FILE"
  fi
  if [[ ! -f "$SDC_POLICY_FILE_FOR_VALIDATION" ]]
  then
    echo "WARN: Security is enabled and was unable to verify policy file '$SDC_POLICY_FILE'" 1>&2
  fi
  SDC_SECURITY_MANAGER="-Djava.security.manager -Djava.security.policy=${SDC_POLICY_FILE}"
  SDC_JAVA_OPTS="${SDC_SECURITY_MANAGER} ${SDC_JAVA_OPTS}"
fi

if [ $VERBOSE -eq 1 ];
then
  echo "SDC Agent:"
  echo "  DIST                           : ${SDC_DIST}"
  echo "  HOME                           : ${SDC_HOME}"
  echo "  CONF                           : ${SDC_CONF}"
  echo "  DATA                           : ${SDC_DATA}"
  echo "  LOG                            : ${SDC_LOG}"
  echo "  SDC_EXTERNAL_RESOURCES         : ${SDC_EXTERNAL_RESOURCES}"
  echo "  RESOURCES                      : ${SDC_RESOURCES}"
  echo "  KAFKA_JAAS_CONF                : ${SDC_KAFKA_JAAS_CONF}"
  echo "  KRB5CCNAME                     : ${KRB5CCNAME}"
  echo "  SECURITY MANAGER POLICY        : ${SDC_POLICY_FILE}"
  echo "  JAVA PATH                      : ${JAVA}"
  echo "  BOOTSTRAP_CLASSPATH            : ${BOOTSTRAP_CLASSPATH}"
  echo "  API_CLASSPATH                  : ${API_CLASSPATH}"
  echo "  CONTAINER_CLASSPATH            : ${CONTAINER_CLASSPATH}"
  echo "  LIBS_COMMON_LIB_DIR            : ${LIBS_COMMON_LIB_DIR}"
  echo "  STREAMSETS_LIBRARIES_DIR       : ${STREAMSETS_LIBRARIES_DIR}"
  echo "  STREAMSETS_LIBRARIES_EXTRA_DIR : ${STREAMSETS_LIBRARIES_EXTRA_DIR}"
  echo "  USER_LIBRARIES_DIR             : ${USER_LIBRARIES_DIR}"
  echo "  JAVA OPTS                      : ${SDC_JAVA_OPTS}"
  echo "  MAIN CLASS                     : ${SDC_MAIN_CLASS}"
fi

cd ${SDC_DIST}

ulimit=`ulimit -n`
if [[ $ulimit -lt $SDC_FILE_LIMIT ]]; then
  MESSAGE="Configuration of maximum open file limit is too low: $ulimit (expected at least $SDC_FILE_LIMIT). Please consult https://goo.gl/6dmjXd"
  reportEvent "ERROR" "STARTUP" "S03" "${MESSAGE}"
  exit 1
fi

EXTRA_OPTIONS=""
if [ -n "${STREAMSETS_LIBRARIES_EXTRA_DIR}" ]
then
  EXTRA_OPTIONS="-streamsetsLibrariesExtraDir ${STREAMSETS_LIBRARIES_EXTRA_DIR}"
fi

check_curl_and_tar_installed() {
  if [[ ! -x "$(which curl)" ]] && [[ ! -x "$(which tar)" ]] ; then
    reportEvent "ERROR" "STARTUP" "S04" "Curl and Tar commands are needed to run Deployment Bootstrap"
    exit -1
  fi
}

run_bootstrap() {
  STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR=${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR:=${SDC_DIST}}

  if [[ ! -z "${STREAMSETS_DEPLOYMENT_SCH_URL}" ]] && [[ ! -z "${STREAMSETS_DEPLOYMENT_ID}" ]] && [[ ! -z "${STREAMSETS_DEPLOYMENT_TOKEN}" ]]; then
    if [[ ! -d ${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}/deployment-lib ]]; then
      check_curl_and_tar_installed

      run curl -o ${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}/bootstrap.tgz -L ${STREAMSETS_DEPLOYMENT_SCH_URL}/engineBootstrap/bootstrap.tgz
      if [[ ${RET} -ne 0 ]]; then
        MESSAGE="Downloading Bootstrap tarball '${STREAMSETS_DEPLOYMENT_SCH_URL}/engineBootstrap/bootstrap.tgz', ${ERR}"
        reportEvent "ERROR" "STARTUP" "S06" "${MESSAGE}"
        exit 1
      fi

      run tar xzf ${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}/bootstrap.tgz --directory ${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}
      if [[ ${RET} -ne 0 ]]; then
        MESSAGE="Extracting tarball binary '${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}/bootstrap.tgz', ${ERR}"
        reportEvent "ERROR" "STARTUP" "S07" "${MESSAGE}"
        exit 1
      fi
    fi

    reportEvent "INFO" "BOOTSTRAP" "B01" "Starting Bootstrap"

    STREAMSETS_BOOTSTRAP_MAIN_CLASS="com.streamsets.engine.deployment.bootstrap.DeploymentBootstrapMain"
    STREAMSETS_BOOTSTRAP_JAVA_OPTS="-Dstreamsets.deployment.conf.dir=${SDC_CONF} -Dstreamsets.deployment.data.dir=${SDC_DATA} -Dstreamsets.deployment.stage.lib.dir=${STREAMSETS_LIBRARIES_DIR} ${STREAMSETS_BOOTSTRAP_JAVA_OPTS}"
    run ${JAVA} ${STREAMSETS_BOOTSTRAP_JAVA_OPTS} -classpath "${STREAMSETS_DEPLOYMENT_LIB_EXTRACT_DIR}/deployment-lib/lib/*" ${STREAMSETS_BOOTSTRAP_MAIN_CLASS}

    if [[ ${RET} -ne 0 ]]; then
      MESSAGE="Bootstrap error, ${ERR}"
      reportEvent "ERROR" "BOOTSTRAP" "B02" "${MESSAGE}"
      exit 1
    fi

    if [[ -f ${SDC_CONF}/deployment-java-opts.txt ]]; then
      DEPLOYMENT_JAVA_OPTS=$(cat ${SDC_CONF}/deployment-java-opts.txt)
      if [[ ! -z ${DEPLOYMENT_JAVA_OPTS} ]]; then
        # Append Java options from the deployment it exists
        SDC_JAVA_OPTS="${SDC_JAVA_OPTS} ${DEPLOYMENT_JAVA_OPTS}"
      fi
    fi
  else
    echo "Deployment Bootstrap Not triggered"
  fi
}

run_sdc() {
  reportEvent "INFO" "EXECUTION" "E01" "Starting engine"
  ${JAVA} -classpath ${BOOTSTRAP_CLASSPATH} ${SDC_JAVA_OPTS} com.streamsets.pipeline.BootstrapMain \
    -mainClass ${SDC_MAIN_CLASS} -apiClasspath "${API_CLASSPATH}" -containerClasspath "${CONTAINER_CLASSPATH}" \
    -streamsetsLibrariesDir "${STREAMSETS_LIBRARIES_DIR}" -userLibrariesDir "${USER_LIBRARIES_DIR}" -configDir ${SDC_CONF} \
    -libsCommonLibDir "${LIBS_COMMON_LIB_DIR}" ${EXTRA_OPTIONS} 2>&1 | tee /tmp/engine-$$.out
  # we need to capture the exist status of the first process in the pipeline
  RET=${PIPESTATUS[0]}
  OUT=$(tail -50 /tmp/engine-$$.out)

  # Remove credential cache if exists
  #
  if [ -f ${SDC_DATA}/sdc-krb5.ticketCache ]; then
    rm ${SDC_DATA}/sdc-krb5.ticketCache
  fi

  if [[ ${RET} -eq 0 ]]; then
    reportEvent "INFO" "EXECUTION" "E02" "Engine shutdown"
    exit ${RET}
  elif [[ ${RET} -eq 88 ]]; then
    reportEvent "INFO" "EXECUTION" "E03" "Restarting Engine"
  else
    reportEvent "ERROR" "EXECUTION" "E04" "Exit: ${RET} STDOUT: ${OUT}"
    echo "Exit: ${RET}"
    exit ${RET}
  fi
}

# we may need to exec the process in some cases. This is determined by option "-exec"
# Restart will not be possible in such a case

if [ $EXEC -eq 1 ]; then
  exec ${JAVA} -classpath ${BOOTSTRAP_CLASSPATH} ${SDC_JAVA_OPTS} com.streamsets.pipeline.BootstrapMain \
       -mainClass ${SDC_MAIN_CLASS} -apiClasspath "${API_CLASSPATH}" -containerClasspath "${CONTAINER_CLASSPATH}" \
       -streamsetsLibrariesDir "${STREAMSETS_LIBRARIES_DIR}" -userLibrariesDir "${USER_LIBRARIES_DIR}" -configDir ${SDC_CONF} \
       -libsCommonLibDir "${LIBS_COMMON_LIB_DIR}" ${EXTRA_OPTIONS}

  status=$?
else
  while true; do
    if [[ ${DEPLOYMENT_RUN} -eq 1 ]]; then
      run_bootstrap
    fi
    run_sdc
    status=${RET}
  done
fi
